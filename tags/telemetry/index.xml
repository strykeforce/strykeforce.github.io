<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Telemetry on Stryke Force Engineering Blog</title>
    <link>https://strykeforce.github.io/tags/telemetry/</link>
    <description>Recent content in Telemetry on Stryke Force Engineering Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 20 Oct 2017 13:01:49 +0000</lastBuildDate>
    
	<atom:link href="https://strykeforce.github.io/tags/telemetry/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using Third Coast Telemetry with Swerve Drive</title>
      <link>https://strykeforce.github.io/posts/thirdcoast-telemetry-swerve/</link>
      <pubDate>Fri, 20 Oct 2017 13:01:49 +0000</pubDate>
      
      <guid>https://strykeforce.github.io/posts/thirdcoast-telemetry-swerve/</guid>
      <description>Using the Third Coast Telemetry Service and Swerve Drive together relies on configuration using Dagger dependency injection. This allows for easy testing and reusable, interchangeable modules. The following code, taken from the example robot in this repository, configures the azimuth and drive Talons for monitoring.
public void robotInit() { try { RobotComponent component; // load config file or create from default resource file in jar  try (FileConfig toml = FileConfig.</description>
    </item>
    
    <item>
      <title>Third Coast Java Library</title>
      <link>https://strykeforce.github.io/posts/thirdcoast/</link>
      <pubDate>Tue, 17 Oct 2017 13:48:58 +0000</pubDate>
      
      <guid>https://strykeforce.github.io/posts/thirdcoast/</guid>
      <description>The Stryke Force 2767 Third Coast swerve drive, talon configuration and telemetry API source code for FRC robots is available from its repository at https://github.com/strykeforce/thirdcoast.
Documentation Third Coast Javadocs.</description>
    </item>
    
    <item>
      <title>Third Coast Telemetry Simulator</title>
      <link>https://strykeforce.github.io/posts/thirdcoast-simulator/</link>
      <pubDate>Wed, 18 Oct 2017 17:36:17 -0400</pubDate>
      
      <guid>https://strykeforce.github.io/posts/thirdcoast-simulator/</guid>
      <description>We use simulated telemetry data for client development, jar file available here here.
Example of use:
$ java -jar sim-v17.0.14.jar Creating simulated inventory... 0: Fake Talon 54 at 5 Hz 1: Fake Talon 57 at 3 Hz 2: Fake Talon 39 at 5 Hz 3: Fake Talon 45 at 1 Hz 4: Fake Talon 13 at 4 Hz 5: Fake Talon 52 at 3 Hz 6: Fake Talon 16 at 2 Hz 7: Fake Talon 46 at 2 Hz 8: Fake Servo 0 at 1 Hz 9: Fake Digital Input 0 at 1 Hz Measure signals are.</description>
    </item>
    
    <item>
      <title>Third Coast Pygrapher</title>
      <link>https://strykeforce.github.io/posts/thirdcoast-pygrapher/</link>
      <pubDate>Wed, 18 Oct 2017 10:04:47 -0400</pubDate>
      
      <guid>https://strykeforce.github.io/posts/thirdcoast-pygrapher/</guid>
      <description>One of the benefits of using open data formats such as JSON and HTTP/REST is the ease with which we can develop client applications for Third Coast Telemetry. This is a simple demonstration client written in Python.
This is a sample of output when run with ./pygrapher 1 SETPOINT
 Pygrapher screen shot   Source Code #!/usr/bin/env python # usage: pygrapher &amp;lt;id&amp;gt; &amp;lt;measurement&amp;gt; # example: pygrapher 0 SETPOINT import sys import requests import socket import json import matplotlib.</description>
    </item>
    
    <item>
      <title>Third Coast Telemetry</title>
      <link>https://strykeforce.github.io/posts/thirdcoast-telemetry/</link>
      <pubDate>Tue, 17 Oct 2017 13:53:02 -0400</pubDate>
      
      <guid>https://strykeforce.github.io/posts/thirdcoast-telemetry/</guid>
      <description>Status: DRAFT
This is the current state of the Third Coast Telemetry protocol between our grapher app written in LabView and our robot code written in Java.
Javadocs are here.
Network The grapher and robot communicate over two network channels, one for control and one for data.
The control channel is a HTTP REST web service that listens on robot TCP port 5800.
The data channel is for one-way graph data streaming from robot to grapher and listens on grapher workstation UDP port 5555.</description>
    </item>
    
  </channel>
</rss>