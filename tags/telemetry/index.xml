<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Telemetry on Stryke Force Engineering Blog</title>
    <link>https://strykeforce.github.io/tags/telemetry/</link>
    <description>Recent content in Telemetry on Stryke Force Engineering Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 20 Oct 2017 09:01:49 -0400</lastBuildDate>
    
	<atom:link href="https://strykeforce.github.io/tags/telemetry/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Third Coast Telemetry Swerve</title>
      <link>https://strykeforce.github.io/posts/thirdcoast-telemetry-swerve/</link>
      <pubDate>Fri, 20 Oct 2017 09:01:49 -0400</pubDate>
      
      <guid>https://strykeforce.github.io/posts/thirdcoast-telemetry-swerve/</guid>
      <description>Using the Third Coast Telemetry Service and Swerve Drive together is simple. Put the following into robotInit() to configure the drive Talons for monitoring.
private final TelemetryService telemetryService = new TelemetryService(); private final SwerveDrive swerve = SwerveDrive.getInstance(); @Override public void robotInit() { swerve.configure(telemetryService); telemetryService.start(); // ... } This will set the Talon status frame update rates on the CAN bus to default values as specified in the javadoc for TelemetryService.</description>
    </item>
    
    <item>
      <title>Third Coast Java Library</title>
      <link>https://strykeforce.github.io/posts/thirdcoast/</link>
      <pubDate>Tue, 17 Oct 2017 09:48:58 -0400</pubDate>
      
      <guid>https://strykeforce.github.io/posts/thirdcoast/</guid>
      <description>Our Third Coast swerve drive, talon configuration and telemetry API for FRC robots is available from its repository.
Documentation Third Coast Javadocs.</description>
    </item>
    
    <item>
      <title>Thirdcoast Simulator</title>
      <link>https://strykeforce.github.io/posts/thirdcoast-simulator/</link>
      <pubDate>Wed, 18 Oct 2017 17:36:17 -0400</pubDate>
      
      <guid>https://strykeforce.github.io/posts/thirdcoast-simulator/</guid>
      <description>We have a robot simulation here.</description>
    </item>
    
    <item>
      <title>Third Coast Pygrapher</title>
      <link>https://strykeforce.github.io/posts/thirdcoast-pygrapher/</link>
      <pubDate>Wed, 18 Oct 2017 10:04:47 -0400</pubDate>
      
      <guid>https://strykeforce.github.io/posts/thirdcoast-pygrapher/</guid>
      <description>One of the benefits of using open data formats such as JSON and HTTP/REST is the ease with which we can develop client applications for Third Coast Telemetry. This is a simple demonstration client written in Python.
This is a sample of output when run with ./pygrapher 1 SETPOINT
 Pygrapher screen shot   Source Code #!/usr/bin/env python # usage: pygrapher &amp;lt;id&amp;gt; &amp;lt;measurement&amp;gt; # example: pygrapher 0 SETPOINT import sys import requests import socket import json import matplotlib.</description>
    </item>
    
    <item>
      <title>Thirdcoast Telemetry</title>
      <link>https://strykeforce.github.io/posts/thirdcoast-telemetry/</link>
      <pubDate>Tue, 17 Oct 2017 13:53:02 -0400</pubDate>
      
      <guid>https://strykeforce.github.io/posts/thirdcoast-telemetry/</guid>
      <description>Status: DRAFT
This is the current state of the Third Coast Telemetry protocol between our grapher app written in LabView and our robot code written in Java.
Network The grapher and robot communicate over two network channels, one for control and one for data.
The control channel is a HTTP REST web service that listens on robot TCP port 5800.
The data channel is for one-way graph data streaming from robot to grapher and listens on grapher workstation UDP port 5555.</description>
    </item>
    
  </channel>
</rss>