<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Stryke Force Engineering Blog</title>
    <link>https://strykeforce.github.io/tags/java/</link>
    <description>Recent content in Java on Stryke Force Engineering Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 20 Oct 2017 13:01:49 +0000</lastBuildDate>
    
	<atom:link href="https://strykeforce.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using Third Coast Telemetry with Swerve Drive</title>
      <link>https://strykeforce.github.io/posts/thirdcoast-telemetry-swerve/</link>
      <pubDate>Fri, 20 Oct 2017 13:01:49 +0000</pubDate>
      
      <guid>https://strykeforce.github.io/posts/thirdcoast-telemetry-swerve/</guid>
      <description>Using the Third Coast Telemetry Service and Swerve Drive together relies on configuration using Dagger dependency injection. This allows for easy testing and reusable, interchangeable modules. The following code, taken from the example robot in this repository, configures the azimuth and drive Talons for monitoring.
public void robotInit() { try { RobotComponent component; // load config file or create from default resource file in jar  try (FileConfig toml = FileConfig.</description>
    </item>
    
    <item>
      <title>Third Coast Swerve Drive</title>
      <link>https://strykeforce.github.io/posts/thirdcoast-swerve/</link>
      <pubDate>Tue, 17 Oct 2017 13:52:49 -0400</pubDate>
      
      <guid>https://strykeforce.github.io/posts/thirdcoast-swerve/</guid>
      <description>This software is designed to run on swerve drive hardware described in this paper. The swerve drive is controlled using the SwerveDrive class. Derivation of inverse kinematic equations are from Ether&amp;rsquo;s Swerve Kinematics and Programming.
The swerve-drive inverse kinematics algorithm will always calculate individual wheel angles as -0.5 to 0.5 rotations, measured clockwise with zero being the straight-ahead position. Wheel speed is calculated as 0 to 1 in the direction of the wheel angle.</description>
    </item>
    
    <item>
      <title>Third Coast Java Library</title>
      <link>https://strykeforce.github.io/posts/thirdcoast/</link>
      <pubDate>Tue, 17 Oct 2017 09:48:58 -0400</pubDate>
      
      <guid>https://strykeforce.github.io/posts/thirdcoast/</guid>
      <description>Our Third Coast swerve drive, talon configuration and telemetry API for FRC robots is available from its repository.
Documentation Third Coast Javadocs.</description>
    </item>
    
    <item>
      <title>Third Coast Telemetry Simulator</title>
      <link>https://strykeforce.github.io/posts/thirdcoast-simulator/</link>
      <pubDate>Wed, 18 Oct 2017 17:36:17 -0400</pubDate>
      
      <guid>https://strykeforce.github.io/posts/thirdcoast-simulator/</guid>
      <description>We have a robot simulation here.</description>
    </item>
    
    <item>
      <title>Third Coast Telemetry</title>
      <link>https://strykeforce.github.io/posts/thirdcoast-telemetry/</link>
      <pubDate>Tue, 17 Oct 2017 13:53:02 -0400</pubDate>
      
      <guid>https://strykeforce.github.io/posts/thirdcoast-telemetry/</guid>
      <description>Status: DRAFT
This is the current state of the Third Coast Telemetry protocol between our grapher app written in LabView and our robot code written in Java.
Network The grapher and robot communicate over two network channels, one for control and one for data.
The control channel is a HTTP REST web service that listens on robot TCP port 5800.
The data channel is for one-way graph data streaming from robot to grapher and listens on grapher workstation UDP port 5555.</description>
    </item>
    
    <item>
      <title>Third Coast Talon Provisioner</title>
      <link>https://strykeforce.github.io/posts/thirdcoast-talon/</link>
      <pubDate>Tue, 17 Oct 2017 13:52:57 -0400</pubDate>
      
      <guid>https://strykeforce.github.io/posts/thirdcoast-talon/</guid>
      <description>Talon Configurations Third Coast provides a library for storing any number of Talon configurations in a TOML file and applying them to Talons. If this configuration file is not present on the roboRIO in the location you specify, a default configuration file stored in the robot application JAR is copied there. See the demonstration robot for an example of specifying a config file to use.
The structure of a Talon configuration file is:</description>
    </item>
    
  </channel>
</rss>