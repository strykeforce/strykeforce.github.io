<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Stryke Force Engineering Blog</title>
    <link>https://strykeforce.github.io/tags/java/</link>
    <description>Recent content in Java on Stryke Force Engineering Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Oct 2017 13:48:58 +0000</lastBuildDate>
    
	<atom:link href="https://strykeforce.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Third Coast Java Library</title>
      <link>https://strykeforce.github.io/posts/thirdcoast/</link>
      <pubDate>Tue, 17 Oct 2017 13:48:58 +0000</pubDate>
      
      <guid>https://strykeforce.github.io/posts/thirdcoast/</guid>
      <description>The Stryke Force 2767 Third Coast swerve drive, talon configuration and telemetry API source code for FRC robots is available from its repository at https://github.com/strykeforce/thirdcoast.
Documentation Third Coast Javadocs.</description>
    </item>
    
    <item>
      <title>Third Coast Telemetry</title>
      <link>https://strykeforce.github.io/posts/thirdcoast-telemetry/</link>
      <pubDate>Tue, 17 Oct 2017 13:53:02 -0400</pubDate>
      
      <guid>https://strykeforce.github.io/posts/thirdcoast-telemetry/</guid>
      <description>This is the current state of the Third Coast Telemetry protocol between our grapher app written in LabView and our robot code written in Java.
See the thirdcoast-users Google Group for support.
Javadocs are here.
Network The grapher and robot communicate over two network channels, one for control and one for data.
The control channel is a HTTP REST web service that listens on robot TCP port 5800.
The data channel is for one-way graph data streaming from robot to grapher and listens on grapher workstation UDP port 5555.</description>
    </item>
    
    <item>
      <title>Third Coast Swerve Drive</title>
      <link>https://strykeforce.github.io/posts/thirdcoast-swerve/</link>
      <pubDate>Tue, 17 Oct 2017 13:52:49 -0400</pubDate>
      
      <guid>https://strykeforce.github.io/posts/thirdcoast-swerve/</guid>
      <description>This software is designed to run on swerve drive hardware described in this paper. The swerve drive is controlled using the SwerveDrive class. Derivation of inverse kinematic equations are from Ether&amp;rsquo;s Swerve Kinematics and Programming.
The swerve-drive inverse kinematics algorithm will always calculate individual wheel angles as -0.5 to 0.5 rotations, measured clockwise with zero being the straight-ahead position. Wheel speed is calculated as 0 to 1 in the direction of the wheel angle.</description>
    </item>
    
    <item>
      <title>Third Coast Talon Provisioner</title>
      <link>https://strykeforce.github.io/posts/thirdcoast-talon/</link>
      <pubDate>Sun, 18 Feb 2018 06:52:57 +0000</pubDate>
      
      <guid>https://strykeforce.github.io/posts/thirdcoast-talon/</guid>
      <description>Talon Configurations Note: This library has seen some major changes as a result of the upgrade to CTRE Phoenix Toolkit in 2018.
Third Coast provides a library for storing any number of TalonSRX configurations in a TOML file and applying them to Talons. If this configuration file is not present on the roboRIO in the location you specify, a default configuration file stored in the robot application JAR is used.</description>
    </item>
    
    <item>
      <title>Using Third Coast Telemetry with Swerve Drive</title>
      <link>https://strykeforce.github.io/posts/thirdcoast-telemetry-swerve/</link>
      <pubDate>Fri, 20 Oct 2017 13:01:49 +0000</pubDate>
      
      <guid>https://strykeforce.github.io/posts/thirdcoast-telemetry-swerve/</guid>
      <description>Using the Third Coast Telemetry Service and Swerve Drive together relies on configuration using Dagger dependency injection. This allows for easy testing and reusable, interchangeable modules. The following code, taken from the example robot in this repository, configures the azimuth and drive Talons for monitoring.
public void robotInit() { URL thirdCoastConfig = Robot.class.getResource(&amp;#34;/META-INF/thirdcoast.toml&amp;#34;); // where you put it  SingletonComponent component = DaggerSingletonComponent.builder().thirdCoastConfig(thirdCoastConfig).build(); swerve = component.swerveDrive(); telemetryService = component.telemetryService(); swerve.registerWith(telemetryService); telemetryService.</description>
    </item>
    
  </channel>
</rss>