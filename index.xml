<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stryke Force Engineering Blog</title>
    <link>https://strykeforce.github.io/</link>
    <description>Recent content on Stryke Force Engineering Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 11 Dec 2017 10:40:48 -0500</lastBuildDate>
    
	<atom:link href="https://strykeforce.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Talon SRX Motor Training Course 2017</title>
      <link>https://strykeforce.github.io/posts/talon-training/</link>
      <pubDate>Mon, 11 Dec 2017 10:40:48 -0500</pubDate>
      
      <guid>https://strykeforce.github.io/posts/talon-training/</guid>
      <description>Stryke Force hosted students and mentors from West Michigan FRC teams for a Talon SRX motor training on December 9, 2017.
Course Material  Course Presentation with step-by-step closed-loop tuning guide (pdf, pptx) Course Video (coming soon)  Topics  How does a motor work? (turning current into rotary motion) Motor performance (speed/torque curves and what they mean) Talon SRX overview Talon SRX control modes Encoders Configuring an entire axis (Talon SRX + sensor + motor)  Open loop Closed loop -PID Tuning a Closed loop Velocity Position Motion Magic   Questions amd Feedback If you have any questions about this class please ask on Chief Delphi and one of us will be sure to respond.</description>
    </item>
    
    <item>
      <title>Third Coast Java Library</title>
      <link>https://strykeforce.github.io/posts/thirdcoast/</link>
      <pubDate>Tue, 17 Oct 2017 13:48:58 +0000</pubDate>
      
      <guid>https://strykeforce.github.io/posts/thirdcoast/</guid>
      <description>The Stryke Force 2767 Third Coast swerve drive, talon configuration and telemetry API source code for FRC robots is available from its repository at https://github.com/strykeforce/thirdcoast.
Documentation Third Coast Javadocs.</description>
    </item>
    
    <item>
      <title>Third Coast Telemetry</title>
      <link>https://strykeforce.github.io/posts/thirdcoast-telemetry/</link>
      <pubDate>Tue, 17 Oct 2017 13:53:02 -0400</pubDate>
      
      <guid>https://strykeforce.github.io/posts/thirdcoast-telemetry/</guid>
      <description>This is the current state of the Third Coast Telemetry protocol between our grapher app written in LabView and our robot code written in Java.
See the thirdcoast-users Google Group for support.
Javadocs are here.
Network The grapher and robot communicate over two network channels, one for control and one for data.
The control channel is a HTTP REST web service that listens on robot TCP port 5800.
The data channel is for one-way graph data streaming from robot to grapher and listens on grapher workstation UDP port 5555.</description>
    </item>
    
    <item>
      <title>Third Coast Swerve Drive</title>
      <link>https://strykeforce.github.io/posts/thirdcoast-swerve/</link>
      <pubDate>Tue, 17 Oct 2017 13:52:49 -0400</pubDate>
      
      <guid>https://strykeforce.github.io/posts/thirdcoast-swerve/</guid>
      <description>This software is designed to run on swerve drive hardware described in this paper. The swerve drive is controlled using the SwerveDrive class. Derivation of inverse kinematic equations are from Ether&amp;rsquo;s Swerve Kinematics and Programming.
The swerve-drive inverse kinematics algorithm will always calculate individual wheel angles as -0.5 to 0.5 rotations, measured clockwise with zero being the straight-ahead position. Wheel speed is calculated as 0 to 1 in the direction of the wheel angle.</description>
    </item>
    
    <item>
      <title>Roborio Digital Output</title>
      <link>https://strykeforce.github.io/posts/roborio-digital-output/</link>
      <pubDate>Tue, 14 Nov 2017 13:32:11 -0500</pubDate>
      
      <guid>https://strykeforce.github.io/posts/roborio-digital-output/</guid>
      <description>Results from testing the digital outputs on the roboRIO.
Pulse Output The pulse length is set with a double and is passed to the FPGA where it is used to determine the pulse length. Calling DigitalOutput#pulse(double pulseLength) gives the following:
 pulseLength = 0.25: pulse width = 144 µsec pulseLength = 0.50: pulse width = 32 µsec pulseLength = 1.00: pulse width = 64 µsec pulseLength = 2.00: pulse width = 128 µsec pulseLength = 4.</description>
    </item>
    
    <item>
      <title>SSH Setup for 2767</title>
      <link>https://strykeforce.github.io/posts/robot-ssh/</link>
      <pubDate>Sun, 29 Oct 2017 11:18:47 -0400</pubDate>
      
      <guid>https://strykeforce.github.io/posts/robot-ssh/</guid>
      <description>These are instructions for the 2767 team on how to configure easy SSH access to the roboRIO from macOS or Linux. (PuTTY instructions coming&amp;hellip;)
Linux and macOS In the steps below, $ is the command-line prompt and should not be typed when entering commands. Grab a mentor for a walk-through of these instructions if you need help!
 Verify you have a $HOME/.ssh directory and that it has permission of drwx------.</description>
    </item>
    
    <item>
      <title>Robot Practice Field Network</title>
      <link>https://strykeforce.github.io/posts/robot-network/</link>
      <pubDate>Fri, 20 Oct 2017 14:56:12 +0000</pubDate>
      
      <guid>https://strykeforce.github.io/posts/robot-network/</guid>
      <description>While using FRC radios in the default configuration is easy to set up, having to connect to an isolated robot access point is inconvienient during development when Internet access is required. We have installed OpenWRT on the Open Mesh OM5P-AN used on our robots.
Diagram  Open Mesh OM5P-AN Radio The radio is configured using OpenWRT as a router with its WiFi interface connecting to our shop network with static IP address 192.</description>
    </item>
    
    <item>
      <title>Using Third Coast Telemetry with Swerve Drive</title>
      <link>https://strykeforce.github.io/posts/thirdcoast-telemetry-swerve/</link>
      <pubDate>Fri, 20 Oct 2017 13:01:49 +0000</pubDate>
      
      <guid>https://strykeforce.github.io/posts/thirdcoast-telemetry-swerve/</guid>
      <description>Using the Third Coast Telemetry Service and Swerve Drive together relies on configuration using Dagger dependency injection. This allows for easy testing and reusable, interchangeable modules. The following code, taken from the example robot in this repository, configures the azimuth and drive Talons for monitoring.
public void robotInit() { try { RobotComponent component; // load config file or create from default resource file in jar  try (FileConfig toml = FileConfig.</description>
    </item>
    
    <item>
      <title>Third Coast Telemetry Simulator</title>
      <link>https://strykeforce.github.io/posts/thirdcoast-simulator/</link>
      <pubDate>Wed, 18 Oct 2017 17:36:17 -0400</pubDate>
      
      <guid>https://strykeforce.github.io/posts/thirdcoast-simulator/</guid>
      <description>We use simulated telemetry data for client development, jar file available here here.
Example of use:
$ java -jar sim-v17.0.14.jar Creating simulated inventory... 0: Fake Talon 54 at 5 Hz 1: Fake Talon 57 at 3 Hz 2: Fake Talon 39 at 5 Hz 3: Fake Talon 45 at 1 Hz 4: Fake Talon 13 at 4 Hz 5: Fake Talon 52 at 3 Hz 6: Fake Talon 16 at 2 Hz 7: Fake Talon 46 at 2 Hz 8: Fake Servo 0 at 1 Hz 9: Fake Digital Input 0 at 1 Hz Measure signals are.</description>
    </item>
    
    <item>
      <title>Third Coast Pygrapher</title>
      <link>https://strykeforce.github.io/posts/thirdcoast-pygrapher/</link>
      <pubDate>Wed, 18 Oct 2017 10:04:47 -0400</pubDate>
      
      <guid>https://strykeforce.github.io/posts/thirdcoast-pygrapher/</guid>
      <description>One of the benefits of using open data formats such as JSON and HTTP/REST is the ease with which we can develop client applications for Third Coast Telemetry. This is a simple demonstration client written in Python.
This is a sample of output when run with ./pygrapher 1 SETPOINT
 Pygrapher screen shot   Source Code #!/usr/bin/env python # usage: pygrapher &amp;lt;id&amp;gt; &amp;lt;measurement&amp;gt; # example: pygrapher 0 SETPOINT import sys import requests import socket import json import matplotlib.</description>
    </item>
    
    <item>
      <title>Third Coast Talon Provisioner</title>
      <link>https://strykeforce.github.io/posts/thirdcoast-talon/</link>
      <pubDate>Tue, 17 Oct 2017 17:52:57 +0000</pubDate>
      
      <guid>https://strykeforce.github.io/posts/thirdcoast-talon/</guid>
      <description>Talon Configurations Third Coast provides a library for storing any number of Talon configurations in a TOML file and applying them to Talons. If this configuration file is not present on the roboRIO in the location you specify, a default configuration file stored in the robot application JAR is copied there. See the demonstration robot for an example of specifying a config file to use.
Javadocs are here.
Multiple Talon configurations can be stored in a TOML configuration file.</description>
    </item>
    
  </channel>
</rss>